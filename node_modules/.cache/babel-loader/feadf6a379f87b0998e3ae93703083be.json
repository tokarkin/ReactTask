{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\dimak\\\\Desktop\\\\\\u041D\\u043E\\u0432\\u0430 \\u043F\\u0430\\u043F\\u043A\\u0430\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { postsApi } from \"../api/api\";\nconst GET_ALL_POSTS = 'GET_ALL_POSTS';\nconst ADD_NEW_POST = 'ADD_NEW_POST';\nconst EDIT_NEW_POST = 'EDIT_NEW_POST';\nconst DELETE_POST = 'DELETE_POST';\nconst GET_COMMENTS = 'GET_COMMENTS';\nconst ADD_COMMENTS = 'ADD_COMMENTS';\nlet initialState = {\n  allPosts: [],\n  editPost: {},\n  commnets: [{\n    body: 'test'\n  }]\n};\nlet idTask = 0;\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_POSTS:\n      return _objectSpread({}, state, {\n        allPosts: action.posts\n      });\n\n    case DELETE_POST:\n      let id = action.post.id;\n      return _objectSpread({}, state, {\n        allPosts: [...state.allPosts.filter(el => el.id !== id)]\n      });\n\n    case EDIT_NEW_POST:\n      return _objectSpread({}, state, {\n        allPosts: [...state.allPosts.map(post => post.id === action.editPost.id ? action.editPost : post)]\n      });\n\n    case ADD_NEW_POST:\n      return _objectSpread({}, state, {\n        allPosts: [...state.allPosts, _objectSpread({\n          id: state.allPosts.length + 1\n        }, action.newPosts)]\n      });\n\n    case GET_COMMENTS:\n      return _objectSpread({}, state, {\n        commnets: action.comment\n      });\n\n    case ADD_COMMENTS:\n      return _objectSpread({}, state, {\n        commnets: action.comment.data.comments\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const setAllPosts = posts => {\n  return {\n    type: GET_ALL_POSTS,\n    posts\n  };\n};\nexport const getCommentsCreator = comment => {\n  return {\n    type: GET_COMMENTS,\n    comment\n  };\n};\nexport const addComments = comment => {\n  return {\n    type: ADD_COMMENTS,\n    comment\n  };\n};\nexport const deleteTask = post => {\n  return {\n    type: DELETE_POST,\n    post\n  };\n};\nexport const newPost = newPosts => {\n  return {\n    type: ADD_NEW_POST,\n    newPosts\n  };\n};\nexport const editNewPost = editPost => {\n  return {\n    type: EDIT_NEW_POST,\n    editPost\n  };\n};\nexport const getComments = id => dispatch => {\n  postsApi.getComments(id).then(data => {\n    dispatch(getCommentsCreator(data));\n    console.log(data.data.comments);\n  });\n};\nexport const postComments = (formData, id) => dispatch => {\n  postsApi.createComment(formData, id).then(data => {\n    if (data.status === 200) {\n      dispatch(addComments(formData));\n    }\n  });\n};\nexport const getAllPosts = () => dispatch => {\n  postsApi.getAllPosts().then(data => {\n    dispatch(setAllPosts(data));\n  });\n};\nexport const sendNewPost = formData => dispatch => {\n  console.log(formData);\n  postsApi.createPosts(formData);\n  dispatch(newPost(formData));\n};\nexport const editNewPosts = editPost => dispatch => {\n  postsApi.updatePosts(editPost).then(data => {\n    if (data.status === 200) {\n      dispatch(editNewPost(editPost));\n    }\n  });\n};\nexport const deletePost = post => dispatch => {\n  postsApi.deletePosts(post.id).then(data => {\n    if (data.status === 200) {\n      dispatch(deleteTask(post));\n    }\n  });\n};\nexport default postReducer;","map":{"version":3,"sources":["C:/Users/dimak/Desktop/Нова папка/src/redux/posts-reducer.js"],"names":["postsApi","GET_ALL_POSTS","ADD_NEW_POST","EDIT_NEW_POST","DELETE_POST","GET_COMMENTS","ADD_COMMENTS","initialState","allPosts","editPost","commnets","body","idTask","postReducer","state","action","type","posts","id","post","filter","el","map","length","newPosts","comment","data","comments","setAllPosts","getCommentsCreator","addComments","deleteTask","newPost","editNewPost","getComments","dispatch","then","console","log","postComments","formData","createComment","status","getAllPosts","sendNewPost","createPosts","editNewPosts","updatePosts","deletePost","deletePosts"],"mappings":"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","sourcesContent":["import {postsApi} from \"../api/api\";\nconst GET_ALL_POSTS= 'GET_ALL_POSTS';\nconst ADD_NEW_POST= 'ADD_NEW_POST';\nconst EDIT_NEW_POST = 'EDIT_NEW_POST';\nconst DELETE_POST= 'DELETE_POST';\nconst GET_COMMENTS='GET_COMMENTS';\nconst ADD_COMMENTS= 'ADD_COMMENTS';\n\n\nlet initialState= {\n    allPosts:[ ],\n    editPost:{},\n    commnets:[{body:'test'}],\n\n}\nlet idTask= 0;\nconst postReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_ALL_POSTS:\n            return {\n                ...state,\n                allPosts: action.posts,\n            }\n        case DELETE_POST:\n            let id = action.post.id;\n\n            return {\n                ...state,\n                allPosts: [...state.allPosts.filter(el=> el.id !== id )]\n            }\n        case EDIT_NEW_POST:\n            return {\n                ...state,\n                allPosts: [...state.allPosts.map(post => post.id === action.editPost.id ? action.editPost: post )]\n            }\n        case ADD_NEW_POST:\n\n            return {\n                ...state,\n                allPosts: [...state.allPosts, {id: state.allPosts.length+1, ...action.newPosts}]\n            }\n        case GET_COMMENTS:\n            return {\n                ...state,\n                commnets: action.comment\n            }\n        case ADD_COMMENTS:\n            return{\n                ...state,\n                commnets: action.comment.data.comments\n            }\n        default:\n            return state;\n    }\n};\nexport const setAllPosts = (posts) => {\n    return {\n        type: GET_ALL_POSTS,\n        posts,\n    }\n};\nexport const getCommentsCreator = (comment) => {\n    return {\n        type: GET_COMMENTS,\n        comment,\n    }\n};\nexport const addComments = (comment) => {\n    return {\n        type: ADD_COMMENTS,\n        comment,\n    }\n};\nexport  const deleteTask = (post)=>{\n    return{\n        type: DELETE_POST,\n        post\n    }\n}\nexport const newPost = (newPosts) => {\n    return {\n        type: ADD_NEW_POST,\n        newPosts,\n    }\n};\nexport const editNewPost = (editPost) => {\n    return {\n        type: EDIT_NEW_POST,\n        editPost,\n    }\n};\nexport const getComments = (id)=> (dispatch)=>{\n        postsApi.getComments(id).then(data=>{\n            dispatch(getCommentsCreator(data));\n            console.log(data.data.comments);\n        })\n};\nexport const postComments = (formData, id )=>(dispatch)=>{\n    postsApi.createComment(formData,id).then(data=>{\n        if(data.status ===200){\n            dispatch(addComments(formData))\n        }\n    })\n}\n\nexport const getAllPosts = () => (dispatch) => {\n    postsApi.getAllPosts().then(data => {\n        dispatch(setAllPosts(data));\n\n    })\n};\n\nexport const sendNewPost = (formData)=> (dispatch)=>{\n    console.log(formData)\n    postsApi.createPosts(formData);\n    dispatch(newPost(formData))\n}\n\n\nexport const editNewPosts = (editPost) => (dispatch) => {\n    postsApi.updatePosts(editPost).then(data => {\n        if (data.status === 200) {\n            dispatch(editNewPost(editPost))\n        }\n    })\n};\n\n\nexport const deletePost = (post) => (dispatch) => {\n    postsApi.deletePosts(post.id).then(data => {\n        if (data.status === 200) {\n            dispatch((deleteTask(post)));\n        }\n    })\n};\n\nexport default postReducer;\n"]},"metadata":{},"sourceType":"module"}